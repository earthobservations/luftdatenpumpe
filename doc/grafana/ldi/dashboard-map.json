{
  "overwrite": true,
  "dashboard": {
    "id": null,
    "uid": null,
    "version": 0,
    "schemaVersion": 16,
    "title": "luftdaten.info map",
    "tags": ["luftdaten.info", "map", "live"],
    "timezone": "browser",
    "editable": true,
    "gnetId": null,
    "graphTooltip": 0,
    "style": "light",
    "time": {
      "from": "now-3h",
      "to": "now"
    },
    "refresh": null,
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": "-- Grafana --",
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "links": [
      {
        "icon": "external link",
        "tags": [],
        "targetBlank": true,
        "title": "Luftdatenpumpe @ GitHub",
        "type": "link",
        "url": "https://github.com/hiveeyes/luftdatenpumpe"
      },
      {
        "icon": "external link",
        "tags": [],
        "targetBlank": true,
        "title": "More about this",
        "type": "link",
        "url": "https://getkotori.org/docs/applications/luftdaten.info/"
      },
      {
        "icon": "external link",
        "tags": [],
        "targetBlank": true,
        "title": "luftdaten.info",
        "type": "link",
        "url": "http://luftdaten.info/"
      },
      {
        "icon": "external link",
        "tags": [],
        "targetBlank": true,
        "title": "luftdaten.info map",
        "type": "link",
        "url": "http://deutschland.maps.luftdaten.info/"
      },
      {
        "icon": "external link",
        "tags": [],
        "targetBlank": true,
        "title": "luftdaten.info archive",
        "type": "link",
        "url": "http://archive.luftdaten.info/"
      }
    ],
    "panels": [
      {
        "circleMaxSize": "1",
        "circleMinSize": "1",
        "colors": [
          "#508642",
          "#7eb26d",
          "#f2c96d",
          "#e0752d",
          "#bf1b00",
          "#890f02"
        ],
        "datasource": "luftdaten_info",
        "decimals": 0,
        "description": "",
        "esGeoPoint": "geohash",
        "esLocationName": "",
        "esMetric": "P1",
        "gridPos": {
          "h": 13,
          "w": 9,
          "x": 0,
          "y": 0
        },
        "height": "600px",
        "hideEmpty": true,
        "hideTimeOverride": true,
        "hideZero": false,
        "id": 12,
        "initialZoom": "5",
        "interval": "",
        "jsonUrl": "/public/json/ldi-stations.json",
        "jsonpCallback": "tu_map",
        "jsonpUrl": "",
        "links": [],
        "locationData": "table+json",
        "mapCenter": "custom",
        "mapCenterLatitude": "51.25",
        "mapCenterLongitude": "10.25",
        "maxDataPoints": 1,
        "mouseWheelZoom": false,
        "showLegend": false,
        "stickyLabels": false,
        "tableLabel": "location_id",
        "tableQueryOptions": {
          "geohashField": "geohash",
          "labelField": "station_id",
          "latitudeField": "latitude",
          "longitudeField": "longitude",
          "metricField": "metric",
          "queryType": "geohash"
        },
        "targets": [
          {
            "groupBy": [
              {
                "params": [
                  "geohash"
                ],
                "type": "tag"
              },
              {
                "params": [
                  "station_id"
                ],
                "type": "tag"
              }
            ],
            "measurement": "ldi_readings",
            "orderByTime": "ASC",
            "policy": "default",
            "query": null,
            "rawQuery": false,
            "refId": "B",
            "resultFormat": "table",
            "select": [
              [
                {
                  "params": [
                    "P1"
                  ],
                  "type": "field"
                },
                {
                  "params": [],
                  "type": "first"
                },
                {
                  "params": [
                    "metric"
                  ],
                  "type": "alias"
                }
              ]
            ],
            "tags": [
              {
                "key": "station_id",
                "operator": "=~",
                "value": "/^$ldi_station_id$/"
              }
            ]
          }
        ],
        "thresholds": "10,20,35,50,100",
        "timeFrom": null,
        "timeShift": null,
        "title": "",
        "transparent": false,
        "type": "grafana-worldmap-panel",
        "unitPlural": "μg/m³ (P10)",
        "unitSingle": "",
        "unitSingular": "μg/m³ (P10)",
        "valueName": "current"
      },
      {
        "columns": [],
        "datasource": "luftdaten_meta",
        "fontSize": "100%",
        "gridPos": {
          "h": 13,
          "w": 15,
          "x": 9,
          "y": 0
        },
        "id": 10,
        "links": [],
        "pageSize": null,
        "scroll": true,
        "showHeader": true,
        "sort": {
          "col": null,
          "desc": false
        },
        "styles": [],
        "targets": [
          {
            "format": "table",
            "group": [],
            "metricColumn": "none",
            "rawQuery": true,
            "rawSql": "SELECT ldi_osmdata.country_code, concat(ldi_osmdata.state, ' » ', ldi_osmdata.city) AS state_and_city, concat(ldi_stations.name, ' (#', CAST(ldi_stations.id AS text), ')') AS name_and_id, ldi_sensors.sensor_type FROM ldi_stations, ldi_osmdata, ldi_sensors WHERE ldi_stations.id = ldi_osmdata.station_id AND ldi_stations.id = ldi_sensors.station_id AND ldi_stations.id IN ($ldi_station_id) AND ldi_sensors.sensor_type IN ($ldi_station_sensortype) ORDER BY country_code, state_and_city, name_and_id, sensor_type;",
            "refId": "A",
            "select": [
              [
                {
                  "params": [
                    "value"
                  ],
                  "type": "column"
                }
              ]
            ],
            "timeColumn": "time",
            "where": [
              {
                "name": "$__timeFilter",
                "params": [],
                "type": "macro"
              }
            ]
          }
        ],
        "title": "",
        "transform": "table",
        "transparent": false,
        "type": "table"
      },
      {
        "content": "- **Data source**: [luftdaten.info] (LDI)\n- **Production**: [Luftdatenpumpe], daily\n\n\n- **Development**: [Erneuerung der Luftdatenpumpe]. All contributions welcome. \n- **Composition**: [The Hiveeyes Project]. Developing a flexible beehive monitoring infrastructure.\n\n[luftdaten.info]: http://luftdaten.info/\n[Luftdatenpumpe]: https://github.com/hiveeyes/luftdatenpumpe\n[Erneuerung der Luftdatenpumpe]: https://community.hiveeyes.org/t/erneuerung-der-luftdatenpumpe/1199\n[The Hiveeyes Project]: https://hiveeyes.org/\n",
        "gridPos": {
          "h": 5,
          "w": 10,
          "x": 1,
          "y": 13
        },
        "id": 6,
        "links": [],
        "mode": "markdown",
        "title": "About",
        "transparent": true,
        "type": "text"
      },
      {
        "content": "1. [Luftdatenpumpe] acquires the current window of measurement readings from the livedata API of [luftdaten.info].\n2. While iterating the readings, it collects information about all stations and sensors they are originating from.\n3. Then, each stations location information gets enhanced by \n   - attaching its geospatial position as a [Geohash].\n   - attaching a synthetic real-world address resolved using the reverse geocoding service [Nominatim] by [OpenStreetMap].\n4. The resulting data is stored into a PostgreSQL database on `weather.hiveeyes.org` using the fine [dataset] package.\n\n[luftdaten.info]: http://luftdaten.info/\n[Luftdatenpumpe]: https://github.com/hiveeyes/luftdatenpumpe\n[Erneuerung der Luftdatenpumpe]: https://community.hiveeyes.org/t/erneuerung-der-luftdatenpumpe/1199\n[The Hiveeyes Project]: https://hiveeyes.org/\n\n[OpenStreetMap]: https://en.wikipedia.org/wiki/OpenStreetMap\n[Nominatim]: https://wiki.openstreetmap.org/wiki/Nominatim\n[Geohash]: https://en.wikipedia.org/wiki/Geohash\n[dataset]: https://dataset.readthedocs.io/\n[SQLAlchemy]: https://www.sqlalchemy.org/\n[RDBMS]: https://en.wikipedia.org/wiki/Relational_database_management_system\n",
        "gridPos": {
          "h": 5,
          "w": 12,
          "x": 11,
          "y": 13
        },
        "id": 8,
        "links": [],
        "mode": "markdown",
        "title": "How does this content get produced?",
        "transparent": true,
        "type": "text"
      }
    ],
    "templating": {
      "list": [
        {
          "allValue": null,
          "current": {
            "text": "All",
            "value": [
              "$__all"
            ]
          },
          "datasource": "luftdaten_meta",
          "definition": "SELECT ldi_osmdata.country_code AS __value, concat(ldi_osmdata.country, ' (', ldi_osmdata.country_code, ')') AS __text FROM ldi_osmdata ORDER BY country_code",
          "hide": 0,
          "includeAll": true,
          "label": "Country",
          "multi": true,
          "name": "ldi_station_countrycode",
          "options": [],
          "query": "SELECT ldi_osmdata.country_code AS __value, concat(ldi_osmdata.country, ' (', ldi_osmdata.country_code, ')') AS __text FROM ldi_osmdata ORDER BY country_code",
          "refresh": 1,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        },
        {
          "allValue": null,
          "current": {
            "text": "All",
            "value": "$__all"
          },
          "datasource": "luftdaten_meta",
          "definition": "",
          "hide": 0,
          "includeAll": true,
          "label": "State",
          "multi": true,
          "name": "ldi_station_state",
          "options": [],
          "query": "SELECT ldi_osmdata.state AS __value, concat(concat_ws(', ', ldi_osmdata.state, ldi_osmdata.country), ' (', ldi_osmdata.country_code, ')') AS __text FROM ldi_osmdata WHERE ldi_osmdata.country_code IN ($ldi_station_countrycode) ORDER BY ldi_osmdata.country_code, ldi_osmdata.state",
          "refresh": 1,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        },
        {
          "allValue": null,
          "current": {
            "text": "All",
            "value": [
              "$__all"
            ]
          },
          "datasource": "luftdaten_meta",
          "definition": "",
          "hide": 0,
          "includeAll": true,
          "label": "City",
          "multi": true,
          "name": "ldi_station_city",
          "options": [],
          "query": "SELECT ldi_osmdata.city AS __value, concat(concat_ws(', ', ldi_osmdata.city, ldi_osmdata.state, ldi_osmdata.country), ' (', ldi_osmdata.country_code, ')') AS __text FROM ldi_osmdata WHERE country_code IN ($ldi_station_countrycode) AND state IN ($ldi_station_state) AND city != '' ORDER BY ldi_osmdata.country_code, ldi_osmdata.state, ldi_osmdata.city",
          "refresh": 1,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        },
        {
          "allValue": null,
          "current": {
            "text": "All",
            "value": [
              "$__all"
            ]
          },
          "datasource": "luftdaten_meta",
          "definition": "",
          "hide": 0,
          "includeAll": true,
          "label": "Sensor type",
          "multi": true,
          "name": "ldi_station_sensortype",
          "options": [],
          "query": "SELECT DISTINCT(sensor_type) FROM ldi_sensors ORDER BY sensor_type",
          "refresh": 1,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        },
        {
          "allValue": null,
          "current": {
            "text": "All",
            "value": "$__all"
          },
          "datasource": "luftdaten_meta",
          "definition": "SELECT ldi_osmdata.station_id FROM ldi_osmdata, ldi_sensors WHERE ldi_osmdata.station_id = ldi_sensors.station_id AND country_code IN ($ldi_station_countrycode) AND state IN ($ldi_station_state) AND city IN ($ldi_station_city) AND ldi_sensors.sensor_type IN ($ldi_station_sensortype) ORDER BY country_code, state, city, road",
          "hide": 2,
          "includeAll": true,
          "label": null,
          "multi": true,
          "name": "ldi_station_id",
          "options": [],
          "query": "SELECT ldi_osmdata.station_id FROM ldi_osmdata, ldi_sensors WHERE ldi_osmdata.station_id = ldi_sensors.station_id AND country_code IN ($ldi_station_countrycode) AND state IN ($ldi_station_state) AND city IN ($ldi_station_city) AND ldi_sensors.sensor_type IN ($ldi_station_sensortype) ORDER BY country_code, state, city, road",
          "refresh": 1,
          "regex": "",
          "skipUrlSync": false,
          "sort": 0,
          "tagValuesQuery": "",
          "tags": [],
          "tagsQuery": "",
          "type": "query",
          "useTags": false
        }
      ]
    },
    "timepicker": {
      "type": "timepicker",
      "enable": true,
      "hidden": false,
      "collapse": false,
      "notice": false,
      "now": true,
      "status": "Stable",
      "refresh_intervals": [
        "5m",
        "10m",
        "15m",
        "30m",
        "1h",
        "2h",
        "1d"
      ],
      "time_options": [
        "5m",
        "15m",
        "1h",
        "6h",
        "12h",
        "24h",
        "2d",
        "7d",
        "30d"
      ]
    }
  }
}
